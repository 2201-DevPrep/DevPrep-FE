const { Children } = require("react");

describe('FlashcardPage', () => {
  beforeEach(() => {
      cy.intercept('GET', 'https://devprep-be.herokuapp.com/api/v1/users/1/cards', {fixture: 'cards.json'})
      cy.intercept('POST', 'https://devprep-be.herokuapp.com/api/v1/login', { fixture: 'login.json' })
      cy.intercept('POST', 'https://devprep-be.herokuapp.com/api/v1/users/1/cards', { fixture: "newCard.json"})
      cy.intercept('PATCH', 'https://devprep-be.herokuapp.com/api/v1/users/1/cards/3', { fixture: "editCard.json"})
      cy.intercept('DELETE', 'https://devprep-be.herokuapp.com/api/v1/users/1/cards/3', { fixture: "deleteCard.json"})
      cy.visit("http://localhost:3000/");
      cy.get('form')
      cy.get(".login-input-username[name='name']")
        .type('Igor')
      cy.get(".login-input-email[name='email']")
        .type('email@example.com')
        .get('.login-button')
        .click()
    .get('[href="/flashcards/behavioralCards"]').click()
    .url().should('eq', 'http://localhost:3000/flashcards/behavioralCards')
  });

  it('user should be able to navigate app pages with app icon or buttons', () => {
    cy.get('.appName > h2').click()
    .url().should('eq', 'http://localhost:3000/dashboard')
    cy.get('[href="/flashcards/behavioralCards"]').click()
    .url().should('eq', 'http://localhost:3000/flashcards/behavioralCards')
    cy.get('.signout-button > .nav-button').click()
    .url().should('eq', 'http://localhost:3000/login')
  })

  it('user should be able to navigate between decks from navbar', () => {
    cy.get('.deck-select').click()
    .get('.dd-menu-behavioral').click()
    .get('.flashcard-footer')
    .should('contain', 'behavioral')
    .get('.deck-select').click()
    .get('.dd-menu-fe').click()
    .get('.flashcard-footer')
    .should('contain', 'technicalFE')
    .get('.deck-select').click()
    .get('.dd-menu-be').click()
    .get('.flashcard-footer')
    .should('contain', 'technicalBE')
  })

  it('user should see a carousel of flashcards and be able to navigate through it', () => {
    cy.get('.flashcard-front > p')
    .should('contain', "What are you looking for in a role?")
    .get('.swiper-button-next').click()
    cy.get('.flashcard-front > p')
    .should('contain', 'What are you proud of?')
    .get('.swiper-button-prev').click()
    cy.get('.flashcard-front > p')
    .should('contain', "What are you looking for in a role?")
    cy.get('.swiper-slide-active > .flashcard-container > .flashcard-front > .MuiButton-root').click()
    cy.get('.flashcard-back > h2')
    .should('be.visible')
    cy.get('.flashcard-back > .MuiButton-root').click()
    cy.get('.flashcard-front > h2')
    .should('be.visible')
  })

  it('user should be able to create a new card', () => {
    cy.get('.carousel-bottom-nav-container > :nth-child(1)').click()
    cy.get('.newcard-textfield-question > .MuiInput-root').click()
    .type('Is this test working?')
    .should('contain', 'Is this test working?')
    cy.get('.newcard-textfield-answer > .MuiInput-root').click()
    .type('Yep!')
    .should('contain', 'Yep!')
    cy.get('.MuiBox-root > .MuiButton-root').click()
    cy.get('.swiper-button-next').click().click()
    cy.get('.flashcard-front').contains('Is this test working?')
  })

  it('user should be able to edit and delete the current card', () => {
    cy.get('.carousel-bottom-nav-container > :nth-child(2)').click()
    cy.get('.update-flashcard-question > .MuiInput-root').click()
    .type(' testing, testing, 123')
    .should('include.text', 'testing, testing, 123')
    cy.get('.MuiBox-root > .MuiButton-root').click()
    cy.get('.flashcard-front > p')
    .should('include.text', 'testing, testing, 123')
    cy.get('.carousel-bottom-nav-container > .MuiButton-containedWarning').click()
    cy.get('.MuiBox-root > .MuiButton-containedWarning').click()
    cy.get('.flashcard-front > p').contains('What are you proud of?')
  })


  it('user should see a list of cards from the current deck below the carousel and be able to delete, update, addnew', () => {
    cy.get('.deck-list-header').contains('Behavioral Deck')
    cy.get('.flashcard-list-container').contains('What are you looking for in a role?')
    cy.get(':nth-child(1) > .MuiButton-containedSecondary').click()
    cy.get('.update-flashcard-question > .MuiInput-root').click()
    .type(' testing, testing, 123')
    .should('include.text', 'testing, testing, 123')
    cy.get('.MuiBox-root > .MuiButton-root').click()
    cy.get('.update-flashcard-question > .MuiInput-root').contains('testing, testing, 123')
    cy.get(':nth-child(1) > .MuiButton-containedWarning').click()
    cy.get('.MuiBox-root > .MuiButton-containedWarning').click()
    cy.get('.flashcard-list-container').should('not.have.text', 'testing, testing, 123')
    cy.get('[data-testid="AddBoxIcon"]').click()
    cy.get('.newcard-textfield-question > .MuiInput-root').click()
    .type('Is this test working?')
    .should('contain', 'Is this test working?')
    cy.get('.newcard-textfield-answer > .MuiInput-root').click()
    .type('Yep!')
    .should('contain', 'Yep!')
    cy.get('.MuiBox-root > .MuiButton-root').click()
    cy.get('.flashcard-list-container').contains('Yep!')
  })

  it('user should be able to filter decklist by star rating using dropdown menu', () => {
    cy.get('.deck-list-filter').click()
    cy.get(':nth-child(1)')
    .contains('stars low-high')
    .click()
    cy.get(':nth-child(1) > :nth-child(3) > .decklist-question')
    .should('contain', 'What are you looking for in a role?')
    cy.get('.deck-list-filter').click()
    .get(':nth-child(2)')
    .contains('stars high-low')
    .click()
    cy.get(':nth-child(1) > :nth-child(3) > .decklist-question')
    .should('contain', 'What are you proud of?')
  })
})